import { WebPartContext } from "@microsoft/sp-webpart-base";
export default class SPService {
    private context;
    constructor(context: WebPartContext);
    webUrl: string;
    serverUrl: string;
    siteUrl: string;
    loggedUserName: string;
    loggedUserEmail: string;
    loggedUserId: any;
    adWebUrl: string;
    getListItems(listName: string): Promise<any>;
    changeDateFormat(date: any): string;
    getByUrl(url: any): Promise<any>;
    getAllItems(listName: string): Promise<any>;
    getFormattedResult(num: any): any;
    getItemById(listName: string, id: any): Promise<any>;
    getFilteredItems(listName: string, query: any): Promise<any>;
    getFieldsChoices(listName: string, fieldName: string): Promise<any>;
    editAndGet(listName: string, id: any, inputs: any): Promise<any>;
    getAllFiles(serverRelativeUrl: string): Promise<any>;
    getFilteredFiles(serverRelativeUrl: string, query: string): Promise<any>;
    getAllFolders(serverRelativeUrl: string): Promise<any>;
    getFilteredFolder(serverRelativeUrl: string, query: string): Promise<any>;
    getLibraryInformationByName(libraryName: string): Promise<any>;
    getInformationUsingServerRelativeUrl(serverRelativeUrl: any): Promise<any>;
    getItemCount(listName: string): Promise<any>;
    getServiceUrl: (url: string) => Promise<any>;
    get(url: string, check?: Boolean): Promise<any>;
    postItem(listName: string, data: any): Promise<any>;
    createList(listName: string, description?: string): Promise<never>;
    createSiteField(fieldName: string, groupName: string): Promise<never>;
    createFieldsForAList(listName: string, fieldsDefinition: any[]): void;
    createFieldForAList(listName: string, fieldDefinition: any): Promise<never>;
    postNotification(listName: string, data: any): Promise<any>;
    updateItem(listName: string, data: any, id: any, toJson?: boolean): Promise<any>;
    updateFileMetaData(fileServerRelativeUrl: any, data: any): Promise<any>;
    updateFolderMetaData(folderServerRelativeUrl: any, data: any): Promise<any>;
    postFile(listName: any, file: any): Promise<any>;
    postFileByServerRelativeUrl(serverRelativeUrl: any, file: any): Promise<any>;
    createFile(listName: any, fileName: any): Promise<any>;
    createFileByServerRelativeUrl(folderServerRelativeUrl: any, fileName: any): Promise<any>;
    createFolder(serverRelativeUrl: string, folderName: string): Promise<any>;
    moveFile(listName: any, originalFileName: any, newFileName: any): Promise<any>;
    moveFolder(listName: any, originalFileName: any, newFileName: any): Promise<any>;
    deleteItem(listName: string, id: any): Promise<any>;
    post(url: string, postInformation: any, toJson?: boolean): Promise<any>;
    isCurrentUserInGroup(groupName: string): Promise<any>;
    getListInformationByName(listName: string): Promise<any>;
    getAllGroupsOfAUser(): Promise<any>;
    getDepartmentsFromAD(Ou: string): Promise<void>;
    getMyProperties(): Promise<any>;
    getUserDepartmentFromAD(userName: any): Promise<void>;
    getUserSubDepartments(userName: any, siteName: any): Promise<void>;
    getPermissionIds(): Promise<void>;
    getUserRole(userID: any): Promise<void>;
    getUserRoleResources(roleIds: any): Promise<void>;
    getUserRolePermissions(roleresourceIds: any): Promise<void>;
    getPageCodes(): Promise<void>;
    getParentSiteDetail(): Promise<any>;
    getDepInfo: (depName: string) => Promise<any>;
    getFinalDepInfo(data: any): Promise<never>;
    getUserDepartment(): Promise<any>;
    createNotification(data: any): Promise<any>;
}
